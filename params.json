{"name":"ProDBG","tagline":"Debugging the way it's meant to be done","body":"### Background\r\n\r\nSo this is pretty much a repost of my google+ post and that can be seen here: https://plus.google.com/u/0/111318371231063149098/posts/6PrUWfuB8K4\r\n\r\nI intend to update this page with more proper info as progress is being made but for now:\r\n\r\nSomething that has been bothered me for many years is the state of (native) debuggers.\r\n\r\nOne of the best our there is ProDG (PS3) but only available for one platform and it for sure has it's share of issues as well. Don't get me started on XCode it's a big joke. VS's debugger is pretty good but still lacks lots of things found in other debuggers (again ProDG, with split views and other features)\r\n\r\nWith the coming of other langs (esp .NET for VS line up) I get the sense that debugging for native hasn't really kept up.\r\n\r\nNot long ago I asked on twitter what people would add as a \"non-obvious\" feature for a debugger. Lots of the ideas was about viewing memory in various way and I fully concur with this. After all we do code that takes some data and produce some kind of data that in turn turns into some other form of data etc and having powerful tools to view that is essential and yet the current memory views are surprisingly limited. Sure you can add watches and such and that helps but still I feel that there is a big gap here.\r\n\r\nAlso something that I feel is lacking is to have a extensible debugger. Most of the present debugger focuses on one platform or wraps gdb. Wrapping gdb isn't wrong in itself but yet again I think there is lots of room for improvement here.\r\n\r\nSo with that I'm announcing my new project that will be called **ProDBG**. The idea is to have a very an debugger based around plugins with a frontend (UI) and backend (for example lldb/gdb/cdb plugins etc) and with other plugin types (for example memory plugins (view this memory as .. texture/wav/etc)\r\n\r\nI thought long about if I should do a commercial product or not because I think there is a space here but in the end I decided to keep it open source. It will be written using Qt for the UI as it seems to be the best (that I have found at least) C/C++ cross platform UI. If you have other suggestions let me know. As I personally like C I will keep the code in C++ written in \"C style\" (also makes it a bit easier on the Windows version as VS still doesn't have C99 support which is lame beyond words but that is how it is)\r\n\r\nI will start with this project during April as I'm busy with other stuff until then but for now come with ideas and suggestions what you would like to see in it.\r\n\r\nI will primary develop it on and for Mac OS X / lldb as the first target (but also do some other targets at the same time to try out the plugin api and how it fits.\r\n\r\nSo then a **FAQ**\r\n\r\nQ: Isn't this a lot of work?\r\nA: Yes. Next question.\r\n\r\nQ: Isn't native code dead?\r\nA: For you maybe.\r\n\r\nQ: Is the debugger for native code only?\r\nA: Not at all, plugins can debug any kind of target. It's up to the plugin if its native/emulated/vm based etc.\r\n\r\nQ: Where can I find the code?\r\nA: There is none yet but will be up at Github at some point stay tuned.\r\n\r\nQ: What will you start with.\r\nA: First getting a basic UI up (similar to ProDG for ideas of split views) and then write a LLDB backend at the same time as designing the plugin APIs (will likely be C based as it makes it easier to use other langs than C/C++ then)\r\n\r\nQ: Can I have this integrated in <insert some IDE here>?\r\nA: Likely not. I found having a separate debugger from where I edit the text is nicer than having it locked up by a debugging session. That said it might be possible to do basic text editing and to trigger a build from within the debugger but that is just as an idea for now.\r\n\r\nMore questions and suggestions let me know?\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}